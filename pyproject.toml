[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools",
]

[project]
name = "nose2"
description = "unittest with plugins"
readme = "README.rst"
keywords= [
  "testing",
  "tests",
  "unittest",
]
license = {text = "BSD-2-Clause"}
authors = [
  { name = "Stephen Rosen", email = "dev@nose2.io" },
]
requires-python = ">=3.6"
classifiers=[
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Testing",
]
dynamic = [
  "version",
]
[project.optional-dependencies]
coverage_plugin = [
  "coverage",
]
dev = [
  "Sphinx",
  "sphinx-issues",
  "sphinx_rtd_theme",
]
[project.urls]
changelog = "https://docs.nose2.io/en/latest/changelog.html"
documentation = "https://docs.nose2.io/"
repository = "https://github.com/nose-devs/nose2"
[project.scripts]
nose2 = "nose2:discover"

[tool.setuptools.dynamic]
version = {attr = "nose2.__version__"}

[tool.ruff]
select = [
  "B",       # flake8-bugbear
  "C4",      # flake8-comprehensions
  "C90",     # McCabe cyclomatic complexity
  "E",       # pycodestyle
  "EXE",     # flake8-executable
  "F",       # Pyflakes
  "I",       # isort
  "ICN",     # flake8-import-conventions
  "INT",     # flake8-gettext
  "PLE",     # Pylint errors
  "PLR091",  # Pylint Refactor just for max-args, max-branches, etc.
  "PYI",     # flake8-pyi
  "RSE",     # flake8-raise
  "RUF",     # Ruff-specific rules
  "TCH",     # flake8-type-checking
  "TID",     # flake8-tidy-imports
  "UP",      # pyupgrade
  "W",       # pycodestyle
  "YTT",     # flake8-2020
  # "A",     # flake8-builtins
  # "ANN",   # flake8-annotations
  # "ARG",   # flake8-unused-arguments
  # "BLE",   # flake8-blind-except
  # "COM",   # flake8-commas
  # "D",     # pydocstyle
  # "DJ",    # flake8-django
  # "DTZ",   # flake8-datetimez
  # "EM",    # flake8-errmsg
  # "ERA",   # eradicate
  # "FBT",   # flake8-boolean-trap
  # "G",     # flake8-logging-format
  # "INP",   # flake8-no-pep420
  # "ISC",   # flake8-implicit-str-concat
  # "N",     # pep8-naming
  # "NPY",   # NumPy-specific rules
  # "PD",    # pandas-vet
  # "PGH",   # pygrep-hooks
  # "PIE",   # flake8-pie
  # "PT",    # flake8-pytest-style
  # "PTH",   # flake8-use-pathlib
  # "Q",     # flake8-quotes
  # "RET",   # flake8-return
  # "S",     # flake8-bandit
  # "SIM",   # flake8-simplify
  # "SLF",   # flake8-self
  # "T10",   # flake8-debugger
  # "T20",   # flake8-print
  # "TRY",   # tryceratops
]
ignore = [
  "B904",
  "RUF005",
  "RUF100"
]
target-version = "py37"

[tool.ruff.isort]
known-third-party = [
  "coverage",
  "mock",
  "six",
]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.pylint]
max-args = 9
max-branches = 15
max-statements = 66

[tool.ruff.per-file-ignores]
"nose2/tests/*" = ["B011"]
# FIXME: resolving these could change behavior -- do it in a separate
#        cleanup and note it in the changelog
"nose2/plugins/loader/*.py" = ["B004"]
"nose2/plugins/mp.py" = ["UP031"]
"nose2/tests/functional/support/such/test_regression_same_havings.py" = ["EXE001"]
